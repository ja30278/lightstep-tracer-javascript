{"version":3,"sources":["../../src/imp/tracer_imp.js"],"names":[],"mappings":";;;;;;;;;;AAIA;;;;AACA;;IAAY,W;;AAEZ;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;+eAbA;AACA;AACA;;AAaA,IAAM,aAAgB,QAAQ,oBAAR,CAAtB;AACA,IAAM,aAAgB,QAAQ,eAAR,CAAtB;AACA,IAAM,SAAgB,QAAQ,UAAR,CAAtB;AACA,IAAM,YAAgB,QAAQ,cAAR,CAAtB;AACA,IAAM,UAAgB,QAAQ,WAAR,CAAtB;AACA,IAAM,gBAAgB,QAAQ,oBAAR,CAAtB;AACA,IAAM,OAAgB,QAAQ,aAAR,CAAtB;;AAEA,IAAM,8BAA8B,YAApC;AACA,IAAM,yBAAyB,aAA/B;;AAEA,IAAM,6BAA+B,yBAArC;AACA,IAAM,6BAA+B,GAArC;AACA,IAAM,+BAA+B,EAArC;AACA,IAAM,yBAA+B,EAArC;;AAEA;AACA;AACA;AACA,IAAM,oBAAoB,EAA1B;;AAEA,IAAI,aAAa,IAAjB;;IAEqB,M;cAAA,M;;AAEjB,aAFiB,MAEjB,CAAY,IAAZ,EAAkB;AAAA,8BAFD,MAEC;;AAAA,2EAFD,MAEC;;AAGd,cAAK,4BAAL;;AAEA,eAAO,QAAQ,EAAf;;AAEA,YAAI,CAAC,UAAL,EAAiB;AACb,oBAAQ,UAAR,CAAmB,IAAnB;AACA;AACH;;AAED;AACA,cAAK,SAAL,GAAiB,+CAAjB;AACA,cAAK,YAAL,GAAoB,KAAK,IAAL,IAAa,MAAK,qBAAlB,IAA2C,IAA/D,CAdc,CAcwD;AACtE,cAAK,QAAL,GAAgB,EAAhB;AACA,cAAK,QAAL,GAAgB,EAAhB;AACA,cAAK,YAAL,GAAoB,EAApB;AACA,cAAK,iBAAL;;AAEA,cAAK,YAAL,GAAoB,WAApB;AACA,YAAI,KAAK,kBAAT,EAA6B;AACzB,kBAAK,YAAL,GAAoB,KAAK,kBAAzB;AACH;;AAED,YAAI,MAAM,MAAK,SAAL,CAAe,SAAf,EAAV;;AAEA;AACA;AACA,cAAK,YAAL,GAAoB,GAApB;AACA,cAAK,KAAL,GAAa,IAAb;AACA,cAAK,QAAL,GAAgB,IAAhB;;AAEA,YAAI,SAAS;AACT,kBAAQ,cAAC,GAAD,EAAM,OAAN,EAAkB;AAAE,sBAAK,KAAL,CAAW,GAAX,EAAgB,OAAhB;AAA2B,aAD9C;AAET,mBAAQ,eAAC,GAAD,EAAM,OAAN,EAAkB;AAAE,sBAAK,MAAL,CAAY,GAAZ,EAAiB,OAAjB;AAA4B;AAF/C,SAAb;;AAKA,YAAI,IAAJ,EAAU;AACN,kBAAK,UAAL,GAAkB,KAAK,kBAAvB;AACH;;AAED,YAAI,CAAC,MAAK,UAAV,EAAsB;AAClB,gBAAI,KAAK,SAAL,IAAkB,KAAK,SAAL,KAAmB,QAAzC,EAAmD;AAC/C,sBAAK,UAAL,GAAkB,gDAAoB,MAApB,CAAlB;AACH,aAFD,MAEO;AACH,sBAAK,UAAL,GAAkB,+CAAmB,MAAnB,CAAlB;AACH;AACJ;;AAED,cAAK,oBAAL,GAA4B,KAA5B;AACA,cAAK,qBAAL,GAA6B,GAA7B;AACA,cAAK,YAAL,GAAoB,IAApB;AACA,cAAK,kBAAL,GAA0B,CAA1B,CArDc,CAqDkB;AAChC,cAAK,uBAAL,GAA+B,CAA/B;AACA,cAAK,qBAAL,GAA6B,CAA7B;;AAEA;AACA,cAAK,kBAAL,GAA0B,EAA1B;AACA,cAAK,eAAL,GAAuB,IAAvB;;AAEA;AACA,cAAK,cAAL,GAAsB,IAAtB;AACA,cAAK,WAAL,GAAmB,IAAI,UAAJ,CAAe;AAC9B,uBAAgB;AAAA,uBAAM,MAAK,SAAL,CAAe,SAAf,EAAN;AAAA,aADc;AAE9B,2BAAgB,yBAAM;AAClB,oBAAI,uBAAqB,MAAK,QAAL,CAAc,cAAvC;AACA,uBAAO,MAAK,SAAL,CAAe,aAAf,CAA6B,GAA7B,CAAP;AACH,aAL6B;AAM9B,2BAAgB,uBAAC,KAAD,EAAW;AACvB,oBAAI,uBAAqB,MAAK,QAAL,CAAc,cAAvC;AACA,uBAAO,MAAK,SAAL,CAAe,aAAf,CAA6B,GAA7B,EAAkC,KAAlC,CAAP;AACH;AAT6B,SAAf,CAAnB;;AAYA;AACA;AACA,cAAK,YAAL,GAAoB,EAApB;;AAEA;AACA;AACA,cAAK,SAAL,GAAiB;AACb,+BAA2B,CADd;AAEb,iCAA2B,CAFd;AAGb,6BAA2B,CAHd;AAIb,4BAA2B,CAJd;AAKb,oCAA2B,CALd;AAMb,sCAA2B,CANd;AAOb,mCAA2B;AAPd,SAAjB;;AAUA;AACA,cAAK,aAAL,GAAqB,EAArB;;AAEA;AACA,cAAK,cAAL,GAAsB,KAAtB;;AAEA;AACA,cAAK,SAAL,CAAe,QAAQ,2BAAR,CAAf;;AAEA;AACA;AACA,cAAK,kBAAL,CAAwB,IAAxB;AACA,cAAK,kBAAL,CAAwB,IAAxB;;AAEA;AACA,YAAI,IAAJ,EAAU;AACN,kBAAK,OAAL,CAAa,IAAb;AACH;;AAED;AACA,cAAK,kBAAL;;AAEA,cAAK,KAAL,+BAAuC,MAAK,YAA5C;;AAEA,cAAK,YAAL;AAnHc;AAoHjB;;AAED;AACA;AACA;AACA;;;iBA3HiB,M;;uDA4Hc;AAC3B,gBAAI,OAAO,IAAX;AACA,iBAAK,GAAL,GAAW,4BAAX;AACA;AACA,gCAAM,CACF,aADE,EAEF,MAFE,EAGF,YAHE,EAIF,iBAJE,EAKF,eALE,EAMF,WANE,EAOF,IAPE,EAQF,MARE,EASF,iBATE,EAUF,qBAVE,EAWF,oBAXE,EAYF,gBAZE,EAaF,iBAbE,CAAN,EAcG,UAAC,UAAD,EAAgB;AACf,qBAAK,UAAL,IAAmB,YAAY;AAC3B,wBAAI,KAAK,GAAL,CAAS,UAAT,CAAJ,EAA0B;AACtB,6BAAK,GAAL,CAAS,UAAT,EAAqB,KAArB,CAA2B,KAAK,GAAhC,EAAqC,SAArC;AACH;AACJ,iBAJD;AAKH,aApBD;AAqBH;;;4CAEmB;AAChB;;AAEA;AACA;AACA,iBAAK,SAAL,CAAe,WAAf,EAAwC,EAAE,MAAO,KAAT,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,EAAgC,cAAc,CAA9C,EAAxC;;AAEA;AACA,iBAAK,SAAL,CAAe,cAAf,EAAwC,EAAE,MAAM,QAAR,EAAmB,cAAc,EAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,gBAAf,EAAwC,EAAE,MAAM,QAAR,EAAmB,cAAc,EAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,gBAAf,EAAwC,EAAE,MAAM,QAAR,EAAmB,cAAc,0BAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,gBAAf,EAAwC,EAAE,MAAM,KAAR,EAAmB,cAAc,0BAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,gBAAf,EAAwC,EAAE,MAAM,QAAR,EAAmB,cAAc,sBAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,sBAAf,EAAwC,EAAE,MAAM,QAAR,EAAmB,cAAc,KAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,MAAf,EAAwC,EAAE,MAAM,KAAR,EAAmB,cAAc,EAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,+BAAf,EAAiD,EAAE,MAAM,KAAR,EAAmB,cAAc,IAAjC,EAAjD;;AAEA;AACA,iBAAK,SAAL,CAAe,UAAf,EAAwC,EAAE,MAAM,MAAR,EAAmB,cAAc,KAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,kBAAf,EAAwC,EAAE,MAAM,KAAR,EAAmB,cAAc,IAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,mBAAf,EAAwC,EAAE,MAAM,KAAR,EAAmB,cAAc,EAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,uBAAf,EAAwC,EAAE,MAAM,KAAR,EAAmB,cAAc,KAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,oBAAf,EAAwC,EAAE,MAAM,MAAR,EAAmB,cAAc,IAAjC,EAAxC;AACA,iBAAK,SAAL,CAAe,wBAAf,EAAyC,EAAE,MAAM,MAAR,EAAmB,cAAc,KAAjC,EAAzC;AACA,iBAAK,SAAL,CAAe,wBAAf,EAAyC,EAAE,MAAM,MAAR,EAAmB,cAAc,KAAjC,EAAzC;AACA,iBAAK,SAAL,CAAe,6BAAf,EAA8C,EAAE,MAAM,KAAR,EAAe,cAAc,IAA7B,EAA9C;AACA,iBAAK,SAAL,CAAe,uBAAf,EAAwC,EAAE,MAAM,KAAR,EAAmB,cAAc,KAAjC,EAAxC;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAK,SAAL,CAAe,0BAAf,EAAgD,EAAE,MAAM,MAAR,EAAmB,cAAc,IAAjC,EAAhD;AACA;;AAEA;AACA,iBAAK,SAAL,CAAe,oBAAf,EAAgD,EAAE,MAAO,KAAT,EAAmB,cAAc,IAAjC,EAAhD;AACA,iBAAK,SAAL,CAAe,QAAf,EAAgD,EAAE,MAAO,MAAT,EAAmB,cAAc,KAAjC,EAAhD;;AAEA;AACA,iBAAK,SAAL,CAAe,0BAAf,EAA6C,EAAE,MAAM,KAAR,EAAmB,cAAc,GAAjC,EAA7C;AACA,iBAAK,SAAL,CAAe,4BAAf,EAA6C,EAAE,MAAM,KAAR,EAAmB,cAAc,IAAjC,EAA7C;;AAEA;AACH;;AAED;AACA;AACA;;;;mCAEW,I,EAAM,M,EAAQ;AAAA;;AACrB;AACA,gBAAI,eAAe,IAAnB;AACA,qBAAS,UAAU,EAAnB;AACA,gBAAI,OAAO,UAAX,EAAuB;AACnB,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,UAAP,CAAkB,MAAtC,EAA8C,GAA9C,EAAmD;AAC/C,wBAAI,MAAM,OAAO,UAAP,CAAkB,CAAlB,CAAV;AACA,wBAAI,OAAO,IAAI,IAAJ,EAAX;AACA,wBAAI,SAAS,KAAK,YAAL,CAAkB,kBAA3B,IACA,SAAS,KAAK,YAAL,CAAkB,sBAD/B,EACuD;AACnD,4BAAI,UAAU,IAAI,iBAAJ,EAAd;AACA,4BAAI,CAAC,OAAL,EAAc;AACV,iCAAK,MAAL,CAAY,uCAAZ,EAAqD,OAArD;AACA;AACH;AACD,uCAAe,OAAf;AACA;AACH;AACJ;AACJ;;AAED,gBAAI,YAAY,eAAe,aAAa,UAA5B,GAAyC,KAAK,4BAAL,EAAzD;AACA,gBAAI,UAAU,uBAAY,IAAZ,EAAkB,IAAlB,EAAwB,+BAAmB,KAAK,SAAL,CAAe,YAAf,EAAnB,EAAkD,SAAlD,CAAxB,CAAd;AACA,oBAAQ,OAAR,CAAgB,KAAK,QAAL,CAAc,iBAA9B;;AAEA,gCAAM,MAAN,EAAc,UAAC,KAAD,EAAQ,GAAR,EAAgB;AAC1B,wBAAQ,GAAR;AACA,yBAAK,YAAL;AACI;AACA;AACJ,yBAAK,WAAL;AACI;AACA,gCAAQ,cAAR,CAAuB,QAAQ,IAA/B;AACA;AACJ,yBAAK,MAAL;AACI,gCAAQ,OAAR,CAAgB,KAAhB;AACA;AACJ;AACI,+BAAK,KAAL,+BAAsC,GAAtC;AACA;AAbJ;AAeH,aAhBD;;AAkBA,gBAAI,iBAAiB,IAArB,EAA2B;AACvB,wBAAQ,aAAR,CAAsB,aAAa,KAAnC;AACH;;AAED,iBAAK,IAAL,CAAU,YAAV,EAAwB,OAAxB;AACA,mBAAO,OAAP;AACH;;;gCAEO,W,EAAa,M,EAAQ,O,EAAS;AAClC,oBAAQ,MAAR;AACA,qBAAK,KAAK,YAAL,CAAkB,mBAAvB;AACA,qBAAK,KAAK,YAAL,CAAkB,eAAvB;AACI,yBAAK,gBAAL,CAAsB,WAAtB,EAAmC,OAAnC;AACA;;AAEJ,qBAAK,KAAK,YAAL,CAAkB,aAAvB;AACI,yBAAK,MAAL,0BAAmC,MAAnC;AACA;;AAEJ;AACI,yBAAK,MAAL,sBAA+B,MAA/B;AACA;AAZJ;AAcH;;;yCAEgB,W,EAAa,O,EAAS;AACnC,gBAAI,CAAC,OAAL,EAAc;AACV,qBAAK,MAAL,CAAY,2DAAZ;AACA;AACH;AACD,gBAAI,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAvB,EAAiC;AAC7B,qBAAK,MAAL,2BAAkC,OAAlC,yCAAkC,OAAlC;AACA;AACH;;AAED,oBAAW,2BAAX,eAAkD,YAAY,KAA9D;AACA,oBAAW,2BAAX,gBAAmD,YAAY,UAA/D;AACA,wBAAY,kBAAZ,CAA+B,UAAC,GAAD,EAAM,KAAN,EAAgB;AAC3C,6BAAW,sBAAX,GAAoC,GAApC,IAA6C,KAA7C;AACH,aAFD;AAGA,oBAAW,2BAAX,gBAAmD,MAAnD;AACA,mBAAO,OAAP;AACH;;;iCAEQ,M,EAAQ,O,EAAS;AACtB,oBAAQ,MAAR;AACA,qBAAK,KAAK,YAAL,CAAkB,mBAAvB;AACA,qBAAK,KAAK,YAAL,CAAkB,eAAvB;AACI,2BAAO,KAAK,eAAL,CAAqB,MAArB,EAA6B,OAA7B,CAAP;;AAEJ,qBAAK,KAAK,YAAL,CAAkB,aAAvB;AACI,yBAAK,MAAL,0BAAmC,MAAnC;AACA,2BAAO,IAAP;;AAEJ;AACI,yBAAK,MAAL,0BAAmC,MAAnC;AACA,2BAAO,IAAP;AAXJ;AAaH;;;wCAEe,M,EAAQ,O,EAAS;AAAA;;AAC7B;AACA,gBAAI,cAAc,+BAAmB,IAAnB,EAAyB,IAAzB,CAAlB;;AAEA;AACA;AACA,gBAAI,cAAc,CAAlB;AACA,gCAAM,OAAN,EAAe,UAAC,KAAD,EAAQ,GAAR,EAAgB;AAC3B,sBAAM,IAAI,WAAJ,EAAN;AACA,oBAAI,IAAI,MAAJ,CAAW,CAAX,EAAc,4BAA4B,MAA1C,MAAsD,2BAA1D,EAAuF;AACnF;AACH;AACD,oBAAI,SAAS,IAAI,MAAJ,CAAW,4BAA4B,MAAvC,CAAb;;AAEA,wBAAQ,MAAR;AACA,yBAAK,SAAL;AACI;AACA,oCAAY,UAAZ,GAAyB,KAAzB;AACA;AACJ,yBAAK,QAAL;AACI;AACA,oCAAY,KAAZ,GAAoB,KAApB;AACA;AACJ,yBAAK,SAAL;AACI;AACA;AACA;AACJ;AACI,+BAAK,MAAL,iCAAyC,GAAzC;AACA;AAfJ;AAiBH,aAxBD;;AA0BA,gBAAI,gBAAgB,CAApB,EAAuB;AACnB;AACA;AACA,uBAAO,IAAP;AACH;AACD,gBAAI,cAAc,CAAlB,EAAqB;AACjB;AACA,qBAAK,MAAL,wCAAiD,MAAjD,UAA4D,OAA5D;AACA,uBAAO,IAAP;AACH;;AAED,gCAAM,OAAN,EAAe,UAAC,KAAD,EAAQ,GAAR,EAAgB;AAC3B,sBAAM,IAAI,WAAJ,EAAN;AACA,oBAAI,IAAI,MAAJ,CAAW,CAAX,EAAc,uBAAuB,MAArC,MAAiD,sBAArD,EAA6E;AACzE;AACH;AACD,oBAAI,SAAS,IAAI,MAAJ,CAAW,uBAAuB,MAAlC,CAAb;AACA,4BAAY,cAAZ,CAA2B,MAA3B,EAAmC,KAAnC;AACH,aAPD;AAQA,mBAAO,WAAP;AACH;;AAGD;AACA;AACA;;AAEA;;;;;;;;;8BAMM,I,EAAM;AACR,gBAAI,CAAC,IAAL,EAAW;AACP,uBAAO,gBAAY,CAAE,CAArB;AACH;AACD,gBAAI,KAAK,QAAL,CAAc,QAAlB,EAA4B;AACxB,qBAAK,KAAL,CAAW,0CAAX;AACA,uBAAO,KAAK,IAAL,CAAP;AACH;AACD,iBAAK,YAAL,CAAkB,IAAlB,EAAwB,KAAxB,EAA+B,IAA/B;AACH;;AAED;AACA;AACA;;;;+BAEO;AACH,mBAAO,KAAK,YAAZ;AACH;;;oCAEW;AACR;AACA;AACA,gBAAI,IAAI,KAAK,QAAL,CAAc,SAAtB;AACA,mBAAQ,MAAM,SAAP,GAAoB,CAApB,GAAwB,CAA/B;AACH;;AAED;;;;uDAC+B;AAC3B,gBAAI,OAAO,KAAK,SAAL,CAAe,YAAf,EAAX;AACA,gBAAI,KAAK,eAAT,EAA0B;AACtB,uBAAO,KAAK,eAAL,CAAqB,SAArB,EAAP;AACH;AACD,mBAAO,IAAP;AACH;;;2CAEkB,W,EAAa;AAC5B,gBAAI,OAAO,KAAK,SAAL,CAAe,OAAf,CAAuB,IAAvB,KAAgC,EAA3C;AACA,gCAAM,WAAN,EAAmB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC7B,qBAAK,GAAL,IAAY,GAAZ;AACH,aAFD;AAGA,iBAAK,OAAL,CAAa,IAAb;AACH;;AAED;;;;kCACU,I,EAAM,I,EAAM;AAClB,iBAAK,IAAL,GAAY,IAAZ;AACA,iBAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB;AACA,iBAAK,QAAL,CAAc,KAAK,IAAnB,IAA2B,KAAK,YAAhC;AACH;;;gCAEO,I,EAAM;AAAA;;AACV,gBAAI,UAAU,MAAV,KAAqB,CAAzB,EAA4B;AACxB,wBAAQ,MAAR,CAAe,QAAO,KAAK,QAAZ,MAAyB,QAAxC,EAAoD;AAChD,0DADJ;AAEA,uBAAO,KAAK,QAAZ;AACH;AACD,gBAAI,QAAO,IAAP,yCAAO,IAAP,OAAgB,QAApB,EAA8B;AAC1B,sBAAM,IAAI,KAAJ,gEAAsE,IAAtE,yCAAsE,IAAtE,GAAN;AACH;;AAED;AACA,gBAAI,KAAK,cAAL,KAAwB,CAA5B,EAA+B;AAC3B,uBAAO,KAAK,cAAZ;AACH;;AAED;AACA,gBAAI,KAAK,oBAAL,KAA8B,SAA9B,IAA2C,KAAK,cAAL,KAAwB,SAAvE,EAAkF;AAC9E,qBAAK,cAAL,GAAsB,KAAK,oBAAL,KAA8B,MAA9B,GAClB,0BADkB,GAElB,4BAFJ;AAGH;;AAED;AACA,gBAAI,WAAW,EAAf;AACA,gBAAI,YAAY,EAAhB;AACA,gCAAM,KAAK,YAAX,EAAyB,UAAC,IAAD,EAAU;AAC/B,uBAAK,kBAAL,CAAwB,QAAxB,EAAkC,SAAlC,EAA6C,IAA7C,EAAmD,IAAnD;AACH,aAFD;;AAIA;AACA;AACA,iBAAK,IAAI,GAAT,IAAgB,IAAhB,EAAsB;AAClB,oBAAI,SAAS,GAAT,MAAkB,SAAlB,IAA+B,UAAU,GAAV,MAAmB,SAAtD,EAAiE;AAC7D,yBAAK,KAAL,qBAA6B,GAA7B,oBAA+C,KAAK,GAAL,CAA/C;AACH;AACJ;;AAED;AACA;AACA;AACA,iBAAK,0BAAL,CAAgC,QAAhC;;AAEA,gBAAI,CAAC,KAAK,oBAAV,EAAgC;AAC5B,qBAAK,mBAAL;AACH;;AAED,gBAAI,KAAK,SAAL,MAAoB,CAAxB,EAA2B;AAAA;AACvB,wBAAI,gBAAgB,EAApB;AACA,wBAAI,QAAQ,CAAZ;AACA,wCAAM,QAAN,EAAgB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC1B,gDAAsB,KAAK,SAAL,CAAe,GAAf,CAAtB,UAA8C,KAAK,SAAL,CAAe,IAAI,QAAnB,CAA9C;AACA;AACH,qBAHD;AAIA,wBAAI,QAAQ,CAAZ,EAAe;AACX,+BAAK,MAAL,yBAAkC,aAAlC;AACH;AATsB;AAU1B;AACD,iBAAK,IAAL,CAAU,SAAV,EAAqB,QAArB,EAA+B,KAAK,QAApC,EAA8C,IAA9C;AACH;;;2CAEkB,Q,EAAU,S,EAAW,I,EAAM,I,EAAM;AAChD,gBAAI,OAAO,KAAK,IAAhB;AACA,gBAAI,QAAQ,KAAK,IAAL,CAAZ;AACA,gBAAI,mBAAmB,KAAnB,yCAAmB,KAAnB,CAAJ;AACA,gBAAI,UAAU,SAAd,EAAyB;AACrB;AACH;;AAED;AACA,oBAAQ,KAAK,IAAb;;AAEA,qBAAK,KAAL;AACI;;AAEJ,qBAAK,MAAL;AACI,wBAAI,UAAU,IAAV,IAAkB,UAAU,KAAhC,EAAuC;AACnC,6BAAK,MAAL,+BAAuC,IAAvC,aAAiD,KAAjD;AACA;AACH;AACD;;AAEJ,qBAAK,KAAL;AACI,wBAAI,cAAc,QAAd,IAA0B,KAAK,KAAL,CAAW,KAAX,MAAsB,KAApD,EAA2D;AACvD,6BAAK,MAAL,2BAAmC,IAAnC,aAA6C,KAA7C;AACA;AACH;AACD,wBAAI,KAAK,GAAL,KAAa,SAAb,IAA0B,KAAK,GAAL,KAAa,SAA3C,EAAsD;AAClD,4BAAI,EAAE,SAAS,KAAK,GAAd,IAAqB,SAAS,KAAK,GAArC,CAAJ,EAA+C;AAC3C,iCAAK,MAAL,eAAuB,IAAvB,0BAA8C,KAA9C,0BAAuE,KAAK,GAA5E,aAAuF,KAAK,GAA5F,EAD2C,CAC0D;AACrG;AACH;AACJ;AACD;;AAEJ,qBAAK,QAAL;AACI,4BAAQ,SAAR;AACA,6BAAK,QAAL;AACI;AACJ,6BAAK,QAAL;AACI,oCAAQ,OAAO,QAAP,CAAgB,KAAhB,CAAR;AACA;AACJ;AACI,iCAAK,MAAL,4BAAqC,IAArC,SAA6C,KAA7C;AACA;AARJ;AAUA;;AAEJ,qBAAK,OAAL;AACI;AACA,wBAAI,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,KAA/B,MAA0C,gBAA9C,EAAgE;AAC5D,6BAAK,MAAL,oCAA6C,IAA7C,kBAA6D,SAA7D;AACA;AACH;AACD;;AAEJ;AACI,yBAAK,MAAL,4BAAoC,KAAK,IAAzC;AACA;AAhDJ;;AAmDA;AACA,gBAAI,WAAW,KAAK,QAAL,CAAc,IAAd,CAAf;AACA,gBAAI,aAAa,SAAjB,EAA4B;AACxB,sBAAM,IAAI,KAAJ,oCAA2C,IAA3C,CAAN;AACH;;AAED;AACA,gBAAI,cAAc,QAAd,IAA0B,aAAa,KAA3C,EAAkD;AAC9C,0BAAU,IAAV,IAAkB,IAAlB;AACA;AACH;;AAED,qBAAS,IAAT,IAAiB;AACb,0BAAW,QADE;AAEb,0BAAW;AAFE,aAAjB;AAIA,iBAAK,QAAL,CAAc,IAAd,IAAsB,KAAtB;AACH;;AAED;AACA;AACA;AACA;AACA;;;;mDAC2B,Q,EAAU;AAAA;;AACjC;AACA,gBAAI,KAAK,KAAL,KAAe,IAAnB,EAAyB;AACrB,oBAAI,CAAC,KAAK,QAAV,EAAoB;AAChB,2BAAO,KAAK,MAAL,CAAY,uDAAZ,CAAP;AACH;AACD,oBAAI,SAAS,YAAb,EAA2B;AACvB,0BAAM,IAAI,KAAJ,CAAU,mDAAV,CAAN;AACH;AACD,oBAAI,SAAS,cAAb,EAA6B;AACzB,0BAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACH;AACD,oBAAI,SAAS,cAAb,EAA6B;AACzB,0BAAM,IAAI,KAAJ,CAAU,kEAAV,CAAN;AACH;AACD,oBAAI,SAAS,cAAb,EAA6B;AACzB,0BAAM,IAAI,KAAJ,CAAU,kEAAV,CAAN;AACH;AACD,oBAAI,SAAS,cAAb,EAA6B;AACzB,0BAAM,IAAI,KAAJ,CAAU,kEAAV,CAAN;AACH;AACD,oBAAI,SAAS,oBAAb,EAAmC;AAC/B,0BAAM,IAAI,KAAJ,CAAU,wEAAV,CAAN;AACH;AACD;AACH;;AAED;AACA,gBAAI,KAAK,QAAL,CAAc,YAAd,CAA2B,MAA3B,GAAoC,CAApC,IAAyC,KAAK,QAAL,CAAc,cAAd,CAA6B,MAA7B,GAAsC,CAAnF,EAAsF;AAAA;AAClF,2BAAK,YAAL,GAAoB,OAAK,SAAL,CAAe,WAAf,CAA2B,OAAK,QAAL,CAAc,cAAzC,CAApB;;AAEA,2BAAK,KAAL,GAAa,uBAAY,OAAK,QAAL,CAAc,YAA1B,CAAb;;AAEA;AACA;AACA;AACA;AACA,wBAAI,OAAO,EAAX;AACA,wCAAM,OAAK,QAAL,CAAc,IAApB,EAA0B,UAAC,KAAD,EAAQ,GAAR,EAAgB;AACtC,4BAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC3B,mCAAK,MAAL,4CAAqD,GAArD;AACA;AACH;AACD,6BAAK,GAAL,IAAY,KAAZ;AACH,qBAND;AAOA,yBAAK,0BAAL,IAAmC,cAAc,OAAjD;AACA,wBAAI,eAAe,OAAK,SAAL,CAAe,UAAf,EAAnB;AACA,wCAAM,YAAN,EAAoB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC9B,6BAAK,GAAL,IAAY,GAAZ;AACH,qBAFD;;AAIA,2BAAK,QAAL,GAAgB,0BAAe,OAAK,YAApB,EAAkC,OAAK,YAAvC,EAAqD,OAAK,QAAL,CAAc,cAAnE,EAAmF,IAAnF,CAAhB;;AAEA,2BAAK,KAAL,CAAW,oCAAX,EAAiD;AAC7C,wCAAiB,OAAK,QAAL,CAAc,cADc;AAE7C,sCAAiB,OAAK,KAAL,CAAW,cAAX;AAF4B,qBAAjD;AAIA,2BAAK,IAAL,CAAU,uBAAV;AA7BkF;AA8BrF;AACJ;;;kDAEyB;AACtB,mBAAO,KAAK,QAAL,CAAc,wBAArB;AACH;;;oDAE2B;AACxB,mBAAO,KAAK,QAAL,CAAc,0BAArB;AACH;;AAED;AACA;AACA;;;;2CAEmB,I,EAAM;AAAA;;AACrB,gBAAI,YAAY,KAAK,SAAL,CAAe,OAAf,CAAuB,IAAvB,CAAhB;AACA,gCAAM,SAAN,EAAiB,UAAC,GAAD,EAAS;AACtB,uBAAK,SAAL,CAAe,GAAf;AACH,aAFD;AAGH;;;kCAES,M,EAAQ;AACd;AACA,gBAAI,OAAO,OAAO,IAAP,EAAX;AACA,gBAAI,KAAK,QAAL,CAAc,IAAd,CAAJ,EAAyB;AACrB;AACH;;AAED,iBAAK,QAAL,CAAc,IAAd,IAAsB,MAAtB;AACA,mBAAO,UAAP,CAAkB,IAAlB;AACH;;;uCAEc;AAAA;;AACX,gCAAM,KAAK,QAAX,EAAqB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC/B,uBAAK,QAAL,CAAc,GAAd,EAAmB,KAAnB,CAAyB,MAAzB;AACH,aAFD;AAGH;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;0CACkB,I,EAAM;AACpB,iBAAK,kBAAL,CAAwB,KAAK,KAA7B,IAAsC,IAAtC;AACA,iBAAK,4BAAL;AACH;;;6CAEoB,I,EAAM;AACvB,mBAAO,KAAK,kBAAL,CAAwB,KAAK,KAA7B,CAAP;AACA,iBAAK,4BAAL;AACH;;;uDAE8B;AAAA;;AAC3B;AACA;AACA,iBAAK,eAAL,GAAuB,IAAvB;AACA,gCAAM,KAAK,kBAAX,EAA+B,UAAC,IAAD,EAAU;AACrC,oBAAI,CAAC,OAAK,eAAN,IACA,KAAK,YAAL,GAAoB,OAAK,eAAL,CAAqB,YAD7C,EAC2D;AACvD,2BAAK,eAAL,GAAuB,IAAvB;AACH;AACJ,aALD;AAMH;;AAED;AACA;AACA;;;;4CAEoB,G,EAAK;AACrB,gBAAI,mBAAJ;AACA,gBAAI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAAa,mBAAmB,KAAK,SAAL,CAAe,GAAf,CAAnB,CAAb;AACH,aATD,CASE,OAAO,CAAP,EAAU;AACR,qBAAK,MAAL,CAAY,uCAAZ;AACA,uBAAO,IAAP;AACH;;AAED,gBAAI,SAAS,IAAI,WAAJ,CAAgB,WAAW,MAA3B,CAAb;AACA,gBAAI,OAAO,IAAI,UAAJ,CAAe,MAAf,CAAX;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,WAAW,MAA/B,EAAuC,GAAvC,EAA4C;AACxC,oBAAI,OAAO,WAAW,UAAX,CAAsB,CAAtB,CAAX;AACA,oBAAI,EAAE,QAAQ,CAAR,IAAa,QAAQ,GAAvB,CAAJ,EAAiC;AAC7B,yBAAK,MAAL,CAAY,2BAAZ;AACA,2BAAO,IAAP;AACH;AACD,qBAAK,CAAL,IAAU,IAAV;AACH;AACD,mBAAO,IAAP;AACH;;;4CAEmB,G,EAAK;AACrB,gBAAI,CAAC,GAAL,EAAU;AACN,qBAAK,MAAL,CAAY,eAAZ;AACA,uBAAO,IAAP;AACH;;AAED,gBAAI,aAAa,EAAjB;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,GAAhC,EAAqC;AACjC,8BAAc,OAAO,YAAP,CAAoB,IAAI,CAAJ,CAApB,CAAd;AACH;AACD,gBAAI;AACA,uBAAO,KAAK,KAAL,CAAW,mBAAmB,UAAnB,CAAX,CAAP;AACH,aAFD,CAEE,OAAO,CAAP,EAAU;AACR,qBAAK,MAAL,CAAY,+BAAZ;AACA,uBAAO,IAAP;AACH;AACJ;;AAED;AACA;AACA;;;;8BAEM;AACF,gBAAI,IAAI,IAAI,UAAJ,CAAe,IAAf,CAAR;AACA,mBAAO,CAAP;AACH;;AAED;AACA;AACA;;;;wCAEgB;AACZ,iBAAK,YAAL,GAAoB,EAApB;AACA,iBAAK,aAAL,GAAqB,EAArB;;AAEA;AACA;AACA,gBAAI,WAAW,EAAf;AACA,gCAAM,KAAK,SAAX,EAAsB,UAAC,MAAD,EAAS,GAAT,EAAiB;AACnC,yBAAS,GAAT,IAAgB,CAAhB;AACH,aAFD;AAGA,iBAAK,SAAL,GAAiB,QAAjB;AACH;;;2CAEkB;AACf,gBAAI,KAAK,YAAL,CAAkB,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,uBAAO,KAAP;AACH;AACD,gBAAI,KAAK,aAAL,CAAmB,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,uBAAO,KAAP;AACH;;AAED,gBAAI,kBAAkB,IAAtB;AACA,gCAAM,KAAK,SAAX,EAAsB,UAAC,GAAD,EAAS;AAC3B,oBAAI,MAAM,CAAV,EAAa;AACT,sCAAkB,KAAlB;AACH;AACJ,aAJD;AAKA,mBAAO,eAAP;AACH;;;uCAEc,M,EAAQ;AACnB,iBAAK,sBAAL,CAA4B,MAA5B;AACA,iBAAK,IAAL,CAAU,YAAV,EAAwB,MAAxB;AACH;;;+CAEsB,M,EAAQ;AAC3B,gBAAI,CAAC,MAAL,EAAa;AACT,qBAAK,MAAL,CAAY,sCAAZ;AACA;AACH;;AAED,gBAAI,KAAK,YAAL,CAAkB,MAAlB,IAA4B,KAAK,QAAL,CAAc,gBAA9C,EAAgE;AAC5D,oBAAI,QAAQ,KAAK,KAAL,CAAW,KAAK,YAAL,CAAkB,MAAlB,GAA2B,KAAK,MAAL,EAAtC,CAAZ;AACA,qBAAK,YAAL,CAAkB,KAAlB,IAA2B,MAA3B;AACA,qBAAK,SAAL,CAAe,eAAf;AACH,aAJD,MAIO;AACH,qBAAK,YAAL,CAAkB,IAAlB,CAAuB,MAAvB;AACH;AACJ;;;wCAEe,K,EAAO,Y,EAAc,Q,EAAU;AAAA;;AAC3C,gCAAM,KAAN,EAAa,UAAC,IAAD,EAAU;AACnB,uBAAK,sBAAL,CAA4B,IAA5B;AACH,aAFD;;AAIA,gBAAI,sBAAsB,KAAK,aAA/B;AACA,iBAAK,aAAL,GAAqB,EAArB;AACA,gBAAI,QAAQ,aAAa,MAAb,CAAoB,mBAApB,CAAZ;AACA,gCAAM,KAAN,EAAa,UAAC,GAAD,EAAS;AAClB,uBAAK,gBAAL,CAAsB,GAAtB;AACH,aAFD;;AAIA,gCAAM,QAAN,EAAgB,UAAC,KAAD,EAAQ,GAAR,EAAgB;AAC5B,oBAAI,OAAO,OAAK,SAAhB,EAA2B;AACvB,2BAAK,SAAL,CAAe,GAAf,KAAuB,KAAvB;AACH,iBAFD,MAEO;AACH,2BAAK,MAAL,wBAAiC,GAAjC;AACH;AACJ,aAND;AAOH;;AAED;AACA;AACA;;;;6CAEqB;AAAA;;AACjB,gBAAI,KAAK,QAAL,CAAc,sBAAlB,EAA0C;AACtC,qBAAK,MAAL,CAAY,6BAAZ;AACA;AACH;;AAED;AACA;AACA;AACA,gBAAI,iBAAiB,CAArB;AACA,gBAAI,aAAa,SAAb,UAAa,GAAM;AACnB,oBAAI,mBAAmB,CAAvB,EAA0B;AAAE;AAAS;AACrC,wBAAK,KAAL,CAAW,0BAAX;AACA,wBAAK,YAAL,CAAkB,KAAlB,EAAyB,IAAzB,EAA+B,UAAC,GAAD,EAAS;AACpC,wBAAI,GAAJ,EAAS;AACL,gCAAK,KAAL,CAAW,iCAAX,EAA8C;AAC1C,mCAAyB,GADiB;AAE1C,6CAAyB,QAAK,YAAL,CAAkB,MAFD;AAG1C,oDAAyB,QAAK;AAHY,yBAA9C;AAKH;AACJ,iBARD;AASH,aAZD;AAaA,iBAAK,SAAL,CAAe,YAAf,CAA4B,UAA5B;AACH;;;8CAEqB;AAAA;;AAClB,gBAAI,KAAK,QAAL,CAAc,QAAlB,EAA4B;AACxB,qBAAK,KAAL,CAAW,2DAAX;AACA;AACH;AACD,gBAAI,KAAK,QAAL,CAAc,sBAAlB,EAA0C;AACtC,qBAAK,KAAL,CAAW,0DAAX;AACA;AACH;AACD,gBAAI,KAAK,KAAL,KAAe,IAAnB,EAAyB;AACrB;AACA;AACA;AACH;AACD,gBAAI,KAAK,oBAAT,EAA+B;AAC3B,qBAAK,KAAL,CAAW,iCAAX;AACA;AACH;;AAED,iBAAK,KAAL,CAAW,0BAAX,EAAuC,KAAK,QAA5C;AACA,iBAAK,oBAAL,GAA4B,IAA5B;;AAEA;AACA;AACA,gBAAI,oBAAoB,CAAxB;AACA,gBAAI,gBAAgB,SAAhB,aAAgB,GAAM;AACtB,oBAAI,sBAAsB,CAA1B,EAA6B;AAAE;AAAS;AACxC,wBAAK,kBAAL;AACH,aAHD;AAIA,iBAAK,SAAL,CAAe,YAAf,CAA4B,aAA5B;;AAEA;AACA,gBAAI,OAAO,SAAP,IAAO,GAAM;AACb,wBAAK,kBAAL,CAAwB,UAAC,GAAD,EAAS;AAC7B,wBAAI,QAAK,oBAAT,EAA+B;AAC3B;AACH;AACJ,iBAJD;AAKH,aAND;;AAQA,gBAAM,QAAQ,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,KAAK,QAAL,CAAc,2BAAzC,CAAd;AACA,iBAAK,eAAL,CAAqB,YAAM;AACvB;AACH,aAFD,EAEG,KAFH;AAGH;;;6CAEoB;AACjB,iBAAK,MAAL,CAAY,yBAAZ;;AAEA,iBAAK,oBAAL,GAA4B,KAA5B;AACA,yBAAa,KAAK,YAAlB;AACA,iBAAK,YAAL,GAAoB,IAApB;AACH;;;2CAEkB,I,EAAM;AAAA;;AACrB;AACA;AACA,gBAAI,KAAK,YAAT,EAAuB;AACnB;AACH;;AAED;AACA;AACA;AACA;AACA;AACA,gBAAI,iBAAiB,KAAK,QAAL,CAAc,6BAAnC;AACA,gBAAI,KAAK,kBAAL,KAA4B,CAA5B,IACA,KAAK,cADL,IAEA,CAAC,KAAK,WAAL,CAAiB,OAAjB,EAFL,EAEiC;AAC7B,iCAAiB,KAAK,GAAL,CAAS,UAAU,+BAAnB,EAAoD,cAApD,CAAjB;AACH;;AAED;AACA;AACA;AACA,gBAAI,UAAU,IAAI,KAAK,GAAL,CAAS,CAAT,EAAY,KAAK,GAAL,CAAS,CAAT,EAAY,KAAK,kBAAjB,CAAZ,CAAlB;AACA,gBAAI,QAAQ,UAAU,cAAtB;AACA,gBAAI,SAAS,OAAO,KAAK,MAAL,KAAgB,GAAhB,GAAsB,IAA7B,CAAb;AACA,gBAAI,QAAQ,KAAK,KAAL,CAAW,KAAK,GAAL,CAAS,CAAT,EAAY,SAAS,KAArB,CAAX,CAAZ;;AAEA,iBAAK,MAAL,8BAAuC,KAAvC;AACA,iBAAK,YAAL,GAAoB,KAAK,eAAL,CAAqB,YAAM;AAC3C,wBAAK,YAAL,GAAoB,IAApB;AACA,wBAAK,YAAL,CAAkB,KAAlB,EAAyB,KAAzB,EAAgC,IAAhC;AACH,aAHmB,EAGjB,KAHiB,CAApB;AAIH;;AAED;;;;;;;;;;;;;;;;qCAaa,M,EAAQ,Q,EAAU,I,EAAM;AAAA;;AACjC,mBAAO,QAAQ,UAAU,GAAV,EAAe,CAAE,CAAhC;;AAEA,gBAAI,aAAa,KAAK,WAAL,CAAiB,OAAjB,EAAjB;AACA,gBAAI,oBAAoB,KAAK,WAAL,CAAiB,YAAjB,EAAxB;;AAEA;AACA,iBAAK,MAAL,CAAY,uBAAZ,EAAqC;AACjC,+BAAiB,iBADgB;AAEjC,gCAAiB,KAAK,WAAL,CAAiB,iBAAjB,EAFgB;AAGjC,uBAAiB;AAHgB,aAArC;;AAMA,gBAAI,cAAc,KAAK,YAAvB;AACA,gBAAI,WAAW,KAAK,SAApB;AACA,gBAAI,eAAe,KAAK,aAAxB;;AAEA;AACA;AACA;AACA;AACA,gBAAI,KAAK,cAAL,IAAuB,CAAC,MAAxB,IAAkC,CAAC,UAAnC,IAAiD,CAAC,QAAtD,EAAgE;AAC5D,qBAAK,MAAL,CAAY,4CAAZ;AACA,8BAAc,EAAd;AACA,2BAAc,EAAd;AACA,+BAAe,EAAf;AACH,aALD,MAKO;AACH;AACA,oBAAI,KAAK,gBAAL,EAAJ,EAA6B;AACzB,yBAAK,MAAL,CAAY,uBAAZ;AACA,2BAAO,KAAK,IAAL,CAAP;AACH;;AAED;AACA;AACA,qBAAK,aAAL;AACA,qBAAK,MAAL,uBAAgC,YAAY,MAA5C;AACH;;AAED,iBAAK,UAAL,CAAgB,gBAAhB,CAAiC,KAAK,QAAtC;;AAEA;AACA;AACA,oBAAQ,MAAR,CAAe,KAAK,YAAL,KAAsB,IAArC,EAA2C,4BAA3C,EA3CiC,CA2CyC;;AAE1E,gBAAI,kBAAkB,KAAK,cAAL,GAAsB,iBAAtB,GAA0C,CAAhE;AACA,gBAAI,MAAM,KAAK,SAAL,CAAe,SAAf,EAAV;AACA,gBAAI,SAAS,yBAAc,KAAK,QAAnB,EAA6B,KAAK,qBAAlC,EAAyD,GAAzD,EACT,WADS,EACI,YADJ,EACkB,QADlB,EAC4B,eAD5B,CAAb;;AAGA,iBAAK,IAAL,CAAU,WAAV,EAAuB,MAAvB;AACA,gBAAI,eAAe,KAAK,SAAL,CAAe,SAAf,EAAnB;;AAEA,iBAAK,UAAL,CAAgB,MAAhB,CAAuB,QAAvB,EAAiC,KAAK,KAAtC,EAA6C,MAA7C,EAAqD,UAAC,GAAD,EAAM,GAAN,EAAc;AAC/D,oBAAI,oBAAoB,QAAK,SAAL,CAAe,SAAf,EAAxB;AACA,oBAAI,sBAAsB,CAAC,MAAM,OAAO,aAAd,IAA+B,GAAzD;;AAEA,oBAAI,GAAJ,EAAS;AACL;AACA,4BAAK,kBAAL;;AAEA;AACA;AACA,wBAAI,kBAAJ;AACA,wBAAI,IAAI,OAAR,EAAiB;AACb,yCAAe,IAAI,OAAnB;AACH,qBAFD,MAEO;AACH,yCAAe,GAAf;AACH;AACD,4BAAK,KAAL,uBAA+B,SAA/B,EAA4C;AACxC,iDAA0B;AADc,qBAA5C;;AAIA,4BAAK,eAAL,CACI,OAAO,cAAP,EADJ,EAEI,OAAO,eAAP,EAFJ,EAGI,OAAO,WAAP,EAHJ;;AAKA;AACA,4BAAK,SAAL,CAAe,qBAAf;;AAEA,4BAAK,IAAL,CAAU,cAAV,EAA0B,GAA1B,EAA+B;AAC3B,+BAAW,GADgB;AAE3B,gCAAW,QAAK,kBAFW;AAG3B,kCAAW;AAHgB,qBAA/B;AAKH,iBA7BD,MA6BO;AACH,wBAAI,QAAK,SAAL,MAAoB,CAAxB,EAA2B;AACvB,gCAAK,MAAL,8BAAuC,mBAAvC,eAAsE;AAClE,4CAAiB,OAAO,YAAP,CAAoB;AAD6B,yBAAtE;AAGH;;AAED;AACA,4BAAK,kBAAL,GAA0B,CAA1B;AACA,4BAAK,qBAAL,GAA6B,GAA7B;;AAEA;AACA,wBAAI,GAAJ,EAAS;AACL,4BAAI,IAAI,MAAJ,IAAc,IAAI,MAAJ,CAAW,cAAzB,IAA2C,IAAI,MAAJ,CAAW,eAA1D,EAA2E;AACvE,oCAAK,WAAL,CAAiB,SAAjB,CACI,YADJ,EAEI,IAAI,MAAJ,CAAW,cAFf,EAGI,IAAI,MAAJ,CAAW,eAHf,EAII,iBAJJ;AAKH,yBAND,MAMO;AACH;AACA;AACA;AACA,oCAAK,cAAL,GAAsB,KAAtB;AACH;;AAED,4BAAI,IAAI,MAAJ,IAAc,IAAI,MAAJ,CAAW,MAAX,GAAoB,CAAtC,EAAyC;AACrC,oCAAK,KAAL,CAAW,kBAAX,EAA+B,IAAI,MAAnC;AACH;AACJ,qBAjBD,MAiBO;AACH,gCAAK,cAAL,GAAsB,KAAtB;AACH;;AAED,4BAAK,IAAL,CAAU,QAAV,EAAoB,MAApB,EAA4B,GAA5B;AACH;AACD,uBAAO,KAAK,GAAL,CAAP;AACH,aArED;AAsEH;;AAED;AACA;AACA;;AAEA;;;;;;gCAGQ;AACJ,mBAAO;AACH,0BAAW,KAAK;AADb,aAAP;AAGH;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;+BACO,G,EAAK,O,EAAS;AACjB,gBAAI,KAAK,SAAL,KAAmB,CAAvB,EAA0B;AACtB;AACH;AACD,iBAAK,eAAL,CAAqB,KAArB,yBAAiD,GAAjD,EAAwD,OAAxD;AACH;;;8BAEK,G,EAAK,O,EAAS;AAChB,gBAAI,KAAK,SAAL,KAAmB,CAAvB,EAA0B;AACtB;AACH;AACD,iBAAK,eAAL,CAAqB,KAArB,wBAAgD,GAAhD,EAAuD,OAAvD;AACH;;;8BAEK,G,EAAK,O,EAAS;AAChB,iBAAK,SAAL,CAAe,mBAAf;;AAEA,gBAAI,KAAK,SAAL,KAAmB,CAAvB,EAA0B;AACtB;AACH;AACD,iBAAK,eAAL,CAAqB,MAArB,wBAAiD,GAAjD,EAAwD,OAAxD;AACH;;;+BAEM,G,EAAK,O,EAAS;AACjB,iBAAK,SAAL,CAAe,iBAAf;;AAEA;AACA,gBAAI,SAAS,KAAK,GAAL,GACR,KADQ,CACF,UAAU,SADR,EAER,OAFQ,CAEA,GAFA,EAGR,OAHQ,CAGA,OAHA,EAIR,MAJQ,EAAb;AAKA,iBAAK,gBAAL,CAAsB,MAAtB;;AAEA;AACA;AACA,gBAAI,YAAY,KAAK,SAAL,EAAhB;AACA,gBAAI,cAAc,CAAlB,EAAqB;AACjB;AACH;;AAED;AACA,gBAAM,MAAM,KAAK,GAAL,EAAZ;AACA,gBAAI,cAAc,CAAlB,EAAqB;AACjB,oBAAM,cAAc,KAAK,uBAAL,GAA+B,KAAK,QAAL,CAAc,qBAAjE;AACA,oBAAI,MAAM,WAAV,EAAuB;AACnB,yBAAK,qBAAL;AACA;AACH;AACD,oBAAI,KAAK,qBAAL,GAA6B,CAAjC,EAAoC;AAChC;AACA,wBAAM,IAAO,KAAK,qBAAZ,6FAAN;AACA;AACA,yBAAK,eAAL,CAAqB,OAArB,yBAAmD,CAAnD,EAAwD,OAAxD;AACH;AACJ;;AAED,iBAAK,eAAL,CAAqB,OAArB,yBAAmD,GAAnD,EAA0D,OAA1D;AACA,iBAAK,uBAAL,GAA+B,GAA/B;AACA,iBAAK,qBAAL,GAA6B,CAA7B;AACH;;;wCAEe,I,EAAM,G,EAAK,O,EAAS;AAChC;AACA;AACA,gBAAI,KAAK,QAAL,CAAc,MAAlB,EAA0B;AACtB;AACH;;AAED,gBAAI,YAAY,SAAhB,EAA2B;AACvB,wBAAQ,IAAR,EAAc,GAAd,EAAmB,OAAnB,EADuB,CACM;AAChC,aAFD,MAEQ;AACJ,wBAAQ,IAAR,EAAc,GAAd,EADI,CACgB;AACvB;AACJ;;;yCAEgB,M,EAAQ;AACrB,gBAAI,CAAC,MAAL,EAAa;AACT;AACH;AACD,gBAAI,KAAK,aAAL,CAAmB,MAAnB,IAA6B,iBAAjC,EAAoD;AAChD,uBAAO,OAAP,iDAA6D,OAAO,OAApE;AACA,qBAAK,aAAL,CAAmB,KAAK,aAAL,CAAmB,MAAnB,GAA4B,CAA/C,IAAoD,MAApD;AACH,aAHD,MAGO;AACH,qBAAK,aAAL,CAAmB,IAAnB,CAAwB,MAAxB;AACH;AACJ;;;WAvrCgB,M;EAAe,YAAY,M;;kBAA3B,M","file":"tracer_imp.js","sourcesContent":["//============================================================================//\n// Imports\n//============================================================================//\n\nimport EventEmitter from 'eventemitter3';\nimport * as opentracing from 'opentracing';\n\nimport SpanContextImp from './span_context_imp';\nimport SpanImp from './span_imp';\nimport _each from '../_each';\nimport { Platform, ProtoTransport, ThriftTransport } from '../platform_abstraction_layer';\nimport AuthImp from './auth_imp';\nimport RuntimeImp from './runtime_imp';\nimport ReportImp from './report_imp';\n\nconst ClockState    = require('./util/clock_state');\nconst LogBuilder    = require('./log_builder');\nconst coerce        = require('./coerce');\nconst constants     = require('../constants');\nconst globals       = require('./globals');\nconst packageObject = require('../../package.json');\nconst util          = require('./util/util');\n\nconst CARRIER_TRACER_STATE_PREFIX = 'ot-tracer-';\nconst CARRIER_BAGGAGE_PREFIX = 'ot-baggage-';\n\nconst DEFAULT_COLLECTOR_HOSTNAME   = 'collector.lightstep.com';\nconst DEFAULT_COLLECTOR_PORT_TLS   = 443;\nconst DEFAULT_COLLECTOR_PORT_PLAIN = 80;\nconst DEFAULT_COLLECTOR_PATH       = '';\n\n// Internal errors should be rare. Set a low limit to ensure a cascading failure\n// does not compound an existing problem by trying to send a great deal of\n// internal error data.\nconst MAX_INTERNAL_LOGS = 20;\n\nlet _singleton = null;\n\nexport default class Tracer extends opentracing.Tracer {\n\n    constructor(opts) {\n        super();\n\n        this._delegateEventEmitterMethods();\n\n        opts = opts || {};\n\n        if (!_singleton) {\n            globals.setOptions(opts);\n            _singleton = this;\n        }\n\n        // Platform abstraction layer\n        this._platform = new Platform(this);\n        this._runtimeGUID = opts.guid || this.override_runtime_guid || null;  // Set once the group name is set\n        this._plugins = {};\n        this._options = {};\n        this._optionDescs = [];\n        this._makeOptionsTable();\n\n        this._opentracing = opentracing;\n        if (opts.opentracing_module) {\n            this._opentracing = opts.opentracing_module;\n        }\n\n        let now = this._platform.nowMicros();\n\n        // The thrift authentication and runtime struct are created as soon as\n        // the necessary initialization options are available.\n        this._startMicros = now;\n        this._auth = null;\n        this._runtime = null;\n\n        let logger = {\n            warn  : (msg, payload) => { this._warn(msg, payload); },\n            error : (err, payload) => { this._error(err, payload); },\n        };\n\n        if (opts) {\n            this._transport = opts.override_transport;\n        }\n\n        if (!this._transport) {\n            if (opts.transport && opts.transport === 'thrift') {\n                this._transport = new ThriftTransport(logger);\n            } else {\n                this._transport = new ProtoTransport(logger);\n            }\n        }\n\n        this._reportingLoopActive = false;\n        this._reportYoungestMicros = now;\n        this._reportTimer = null;\n        this._reportErrorStreak = 0;    // Number of consecutive errors\n        this._lastVisibleErrorMillis = 0;\n        this._skippedVisibleErrors = 0;\n\n        // Set addActiveRootSpan() for detail\n        this._activeRootSpanSet = {};\n        this._activeRootSpan = null;\n\n        // For clock skew adjustment.\n        this._useClockState = true;\n        this._clockState = new ClockState({\n            nowMicros     : () => this._platform.nowMicros(),\n            localStoreGet : () => {\n                let key = `clock_state/${this._options.collector_host}`;\n                return this._platform.localStoreGet(key);\n            },\n            localStoreSet : (value) => {\n                let key = `clock_state/${this._options.collector_host}`;\n                return this._platform.localStoreSet(key, value);\n            },\n        });\n\n        // Span reporting buffer and per-report data\n        // These data are reset on every successful report.\n        this._spanRecords = [];\n\n        // The counter names need to match those accepted by the collector.\n        // These are internal counters only.\n        this._counters = {\n            'internal.errors'        : 0,\n            'internal.warnings'      : 0,\n            'spans.dropped'          : 0,\n            'logs.dropped'           : 0,\n            'logs.keys.over_limit'   : 0,\n            'logs.values.over_limit' : 0,\n            'reports.errors.send'    : 0,\n        };\n\n        // For internal (not client) logs reported to the collector\n        this._internalLogs = [];\n\n        // Current runtime state / status\n        this._flushIsActive = false;\n\n        // Built-in plugins\n        this.addPlugin(require('../plugins/log_to_console'));\n\n        // Initialize the platform options after the built-in plugins in\n        // case any of those options affect the built-ins.\n        this.addPlatformPlugins(opts);\n        this.setPlatformOptions(opts);\n\n        // Set constructor arguments\n        if (opts) {\n            this.options(opts);\n        }\n\n        // This relies on the options being set: call this last.\n        this._setupReportOnExit();\n\n        this._info(`Tracer created with guid ${this._runtimeGUID}`);\n\n        this.startPlugins();\n    }\n\n    // Morally speaking, Tracer also inherits from EventEmmiter, but we must\n    // fake it via composition.\n    //\n    // If not obvious on inspection: a hack.\n    _delegateEventEmitterMethods() {\n        let self = this;\n        this._ee = new EventEmitter();\n        // The list of methods at https://nodejs.org/api/events.html\n        _each([\n            'addListener',\n            'emit',\n            'eventNames',\n            'getMaxListeners',\n            'listenerCount',\n            'listeners',\n            'on',\n            'once',\n            'prependListener',\n            'prependOnceListener',\n            'removeAllListeners',\n            'removeListener',\n            'setMaxListeners',\n        ], (methodName) => {\n            self[methodName] = function () {\n                if (self._ee[methodName]) {\n                    self._ee[methodName].apply(self._ee, arguments);\n                }\n            };\n        });\n    }\n\n    _makeOptionsTable() {\n        /* eslint-disable key-spacing, no-multi-spaces */\n\n        // NOTE: make 'verbosity' the first option so it is processed first on\n        // options changes and takes effect as soon as possible.\n        this.addOption('verbosity',             { type : 'int', min: 0, max: 9, defaultValue: 1 });\n\n        // Core options\n        this.addOption('access_token',          { type: 'string',  defaultValue: '' });\n        this.addOption('component_name',        { type: 'string',  defaultValue: '' });\n        this.addOption('collector_host',        { type: 'string',  defaultValue: DEFAULT_COLLECTOR_HOSTNAME });\n        this.addOption('collector_port',        { type: 'int',     defaultValue: DEFAULT_COLLECTOR_PORT_TLS });\n        this.addOption('collector_path',        { type: 'string',  defaultValue: DEFAULT_COLLECTOR_PATH });\n        this.addOption('collector_encryption',  { type: 'string',  defaultValue: 'tls' });\n        this.addOption('tags',                  { type: 'any',     defaultValue: {} });\n        this.addOption('max_reporting_interval_millis',  { type: 'int',     defaultValue: 2500 });\n\n        // Non-standard, may be deprecated\n        this.addOption('disabled',              { type: 'bool',    defaultValue: false });\n        this.addOption('max_span_records',      { type: 'int',     defaultValue: 4096 });\n        this.addOption('default_span_tags',     { type: 'any',     defaultValue: {} });\n        this.addOption('report_timeout_millis', { type: 'int',     defaultValue: 30000 });\n        this.addOption('gzip_json_requests',    { type: 'bool',    defaultValue: true });\n        this.addOption('disable_reporting_loop', { type: 'bool',    defaultValue: false });\n        this.addOption('disable_report_on_exit', { type: 'bool',    defaultValue: false });\n        this.addOption('delay_initial_report_millis', { type: 'int', defaultValue: 1000 });\n        this.addOption('error_throttle_millis', { type: 'int',     defaultValue: 60000 });\n\n        // Debugging options\n        //\n        // These are not part of the supported public API.\n        //\n        // If false, SSL certificate verification is skipped. Useful for testing.\n        this.addOption('certificate_verification',      { type: 'bool',    defaultValue: true });\n        // I.e. report only on explicit calls to flush()\n\n        // Unit testing options\n        this.addOption('override_transport',            { type : 'any',    defaultValue: null });\n        this.addOption('silent',                        { type : 'bool',   defaultValue: false });\n\n        // Hard upper limits to protect against worst-case scenarios for log field sizes.\n        this.addOption('log_field_key_hard_limit',   { type: 'int',     defaultValue: 256 });\n        this.addOption('log_field_value_hard_limit', { type: 'int',     defaultValue: 1024 });\n\n        /* eslint-disable key-spacing, no-multi-spaces */\n    }\n\n    // ---------------------------------------------------------------------- //\n    // opentracing.Tracer SPI\n    // ---------------------------------------------------------------------- //\n\n    _startSpan(name, fields) {\n        // First, assemble the SpanContextImp for our SpanImp.\n        let parentCtxImp = null;\n        fields = fields || {};\n        if (fields.references) {\n            for (let i = 0; i < fields.references.length; i++) {\n                let ref = fields.references[i];\n                let type = ref.type();\n                if (type === this._opentracing.REFERENCE_CHILD_OF ||\n                    type === this._opentracing.REFERENCE_FOLLOWS_FROM) {\n                    let context = ref.referencedContext();\n                    if (!context) {\n                        this._error('Span reference has an invalid context', context);\n                        continue;\n                    }\n                    parentCtxImp = context;\n                    break;\n                }\n            }\n        }\n\n        let traceGUID = parentCtxImp ? parentCtxImp._traceGUID : this.generateTraceGUIDForRootSpan();\n        let spanImp = new SpanImp(this, name, new SpanContextImp(this._platform.generateUUID(), traceGUID));\n        spanImp.addTags(this._options.default_span_tags);\n\n        _each(fields, (value, key) => {\n            switch (key) {\n            case 'references':\n                // Ignore: handled before constructing the span\n                break;\n            case 'startTime':\n                // startTime is in milliseconds\n                spanImp.setBeginMicros(value * 1000);\n                break;\n            case 'tags':\n                spanImp.addTags(value);\n                break;\n            default:\n                this._warn(`Ignoring unknown field '${key}'`);\n                break;\n            }\n        });\n\n        if (parentCtxImp !== null) {\n            spanImp.setParentGUID(parentCtxImp._guid);\n        }\n\n        this.emit('start_span', spanImp);\n        return spanImp;\n    }\n\n    _inject(spanContext, format, carrier) {\n        switch (format) {\n        case this._opentracing.FORMAT_HTTP_HEADERS:\n        case this._opentracing.FORMAT_TEXT_MAP:\n            this._injectToTextMap(spanContext, carrier);\n            break;\n\n        case this._opentracing.FORMAT_BINARY:\n            this._error(`Unsupported format: ${format}`);\n            break;\n\n        default:\n            this._error(`Unknown format: ${format}`);\n            break;\n        }\n    }\n\n    _injectToTextMap(spanContext, carrier) {\n        if (!carrier) {\n            this._error('Unexpected null FORMAT_TEXT_MAP carrier in call to inject');\n            return;\n        }\n        if (typeof carrier !== 'object') {\n            this._error(`Unexpected '${typeof carrier}' FORMAT_TEXT_MAP carrier in call to inject`);\n            return;\n        }\n\n        carrier[`${CARRIER_TRACER_STATE_PREFIX}spanid`] = spanContext._guid;\n        carrier[`${CARRIER_TRACER_STATE_PREFIX}traceid`] = spanContext._traceGUID;\n        spanContext.forEachBaggageItem((key, value) => {\n            carrier[`${CARRIER_BAGGAGE_PREFIX}${key}`] = value;\n        });\n        carrier[`${CARRIER_TRACER_STATE_PREFIX}sampled`] = 'true';\n        return carrier;\n    }\n\n    _extract(format, carrier) {\n        switch (format) {\n        case this._opentracing.FORMAT_HTTP_HEADERS:\n        case this._opentracing.FORMAT_TEXT_MAP:\n            return this._extractTextMap(format, carrier);\n\n        case this._opentracing.FORMAT_BINARY:\n            this._error(`Unsupported format: ${format}`);\n            return null;\n\n        default:\n            this._error(`Unsupported format: ${format}`);\n            return null;\n        }\n    }\n\n    _extractTextMap(format, carrier) {\n        // Begin with the empty SpanContextImp\n        let spanContext = new SpanContextImp(null, null);\n\n        // Iterate over the contents of the carrier and set the properties\n        // accordingly.\n        let foundFields = 0;\n        _each(carrier, (value, key) => {\n            key = key.toLowerCase();\n            if (key.substr(0, CARRIER_TRACER_STATE_PREFIX.length) !== CARRIER_TRACER_STATE_PREFIX) {\n                return;\n            }\n            let suffix = key.substr(CARRIER_TRACER_STATE_PREFIX.length);\n\n            switch (suffix) {\n            case 'traceid':\n                foundFields++;\n                spanContext._traceGUID = value;\n                break;\n            case 'spanid':\n                foundFields++;\n                spanContext._guid = value;\n                break;\n            case 'sampled':\n                // Ignored. The carrier may be coming from a different client\n                // library that sends this (even though it's not used).\n                break;\n            default:\n                this._error(`Unrecognized carrier key '${key}' with recognized prefix. Ignoring.`);\n                break;\n            }\n        });\n\n        if (foundFields === 0) {\n            // This is not an error per se, there was simply no SpanContext\n            // in the carrier.\n            return null;\n        }\n        if (foundFields < 2) {\n            // A partial SpanContext suggests some sort of data corruption.\n            this._error(`Only found a partial SpanContext: ${format}, ${carrier}`);\n            return null;\n        }\n\n        _each(carrier, (value, key) => {\n            key = key.toLowerCase();\n            if (key.substr(0, CARRIER_BAGGAGE_PREFIX.length) !== CARRIER_BAGGAGE_PREFIX) {\n                return;\n            }\n            let suffix = key.substr(CARRIER_BAGGAGE_PREFIX.length);\n            spanContext.setBaggageItem(suffix, value);\n        });\n        return spanContext;\n    }\n\n\n    // ---------------------------------------------------------------------- //\n    // LightStep extensions\n    // ---------------------------------------------------------------------- //\n\n    /**\n     * Manually sends a report of all buffered data.\n     *\n     * @param  {Function} done - callback function invoked when the report\n     *         either succeeds or fails.\n     */\n    flush(done) {\n        if (!done) {\n            done = function () {};\n        }\n        if (this._options.disabled) {\n            this._warn('Manual flush() called in disabled state.');\n            return done(null);\n        }\n        this._flushReport(true, false, done);\n    }\n\n    //-----------------------------------------------------------------------//\n    // Options\n    //-----------------------------------------------------------------------//\n\n    guid() {\n        return this._runtimeGUID;\n    }\n\n    verbosity() {\n        // The 'undefined' handling below is for logs that may occur before the\n        // options are initialized.\n        let v = this._options.verbosity;\n        return (v === undefined) ? 1 : v;\n    }\n\n    // Call to generate a new Trace GUID\n    generateTraceGUIDForRootSpan() {\n        let guid = this._platform.generateUUID();\n        if (this._activeRootSpan) {\n            guid = this._activeRootSpan.traceGUID();\n        }\n        return guid;\n    }\n\n    setPlatformOptions(userOptions) {\n        let opts = this._platform.options(this) || {};\n        _each(userOptions, (val, key) => {\n            opts[key] = val;\n        });\n        this.options(opts);\n    }\n\n    // Register a new option.  Used by plug-ins.\n    addOption(name, desc) {\n        desc.name = name;\n        this._optionDescs.push(desc);\n        this._options[desc.name] = desc.defaultValue;\n    }\n\n    options(opts) {\n        if (arguments.length === 0) {\n            console.assert(typeof this._options === 'object',   // eslint-disable-line\n                'Internal error: _options field incorrect');\n            return this._options;\n        }\n        if (typeof opts !== 'object') {\n            throw new Error(`options() must be called with an object: type was ${typeof opts}`);\n        }\n\n        // \"collector_port\" 0 acts as an alias for \"use the default\".\n        if (opts.collector_port === 0) {\n            delete opts.collector_port;\n        }\n\n        // \"collector_encryption\" acts an alias for the common cases of 'collector_port'\n        if (opts.collector_encryption !== undefined && opts.collector_port === undefined) {\n            opts.collector_port = opts.collector_encryption !== 'none' ?\n                DEFAULT_COLLECTOR_PORT_TLS :\n                DEFAULT_COLLECTOR_PORT_PLAIN;\n        }\n\n        // Track what options have been modified\n        let modified = {};\n        let unchanged = {};\n        _each(this._optionDescs, (desc) => {\n            this._setOptionInternal(modified, unchanged, opts, desc);\n        });\n\n        // Check for any invalid options: is there a key in the specified operation\n        // that didn't result either in a change or a reset to the existing value?\n        for (let key in opts) {\n            if (modified[key] === undefined && unchanged[key] === undefined) {\n                this._warn(`Invalid option ${key} with value ${opts[key]}`);\n            }\n        }\n\n        //\n        // Update the state information based on the changes\n        //\n        this._initReportingDataIfNeeded(modified);\n\n        if (!this._reportingLoopActive) {\n            this._startReportingLoop();\n        }\n\n        if (this.verbosity() >= 3) {\n            let optionsString = '';\n            let count = 0;\n            _each(modified, (val, key) => {\n                optionsString += `\\t${JSON.stringify(key)}: ${JSON.stringify(val.newValue)}\\n`;\n                count++;\n            });\n            if (count > 0) {\n                this._debug(`Options modified:\\n${optionsString}`);\n            }\n        }\n        this.emit('options', modified, this._options, this);\n    }\n\n    _setOptionInternal(modified, unchanged, opts, desc) {\n        let name = desc.name;\n        let value = opts[name];\n        let valueType = typeof value;\n        if (value === undefined) {\n            return;\n        }\n\n        // Parse the option (and check constraints)\n        switch (desc.type) {\n\n        case 'any':\n            break;\n\n        case 'bool':\n            if (value !== true && value !== false) {\n                this._error(`Invalid boolean option '${name}' '${value}'`);\n                return;\n            }\n            break;\n\n        case 'int':\n            if (valueType !== 'number' || Math.floor(value) !== value) {\n                this._error(`Invalid int option '${name}' '${value}'`);\n                return;\n            }\n            if (desc.min !== undefined && desc.max !== undefined) {\n                if (!(value >= desc.min && value <= desc.max)) {\n                    this._error(`Option '${name}' out of range '${value}' is not between ${desc.min} and ${desc.max}`);  // eslint-disable-line max-len\n                    return;\n                }\n            }\n            break;\n\n        case 'string':\n            switch (valueType) {\n            case 'string':\n                break;\n            case 'number':\n                value = coerce.toString(value);\n                break;\n            default:\n                this._error(`Invalid string option ${name} ${value}`);\n                return;\n            }\n            break;\n\n        case 'array':\n            // Per http://stackoverflow.com/questions/4775722/check-if-object-is-array\n            if (Object.prototype.toString.call(value) !== '[object Array]') {\n                this._error(`Invalid type for array option ${name}: found '${valueType}'`);\n                return;\n            }\n            break;\n\n        default:\n            this._error(`Unknown option type '${desc.type}'`);\n            return;\n        }\n\n        // Set the new value, recording any modifications\n        let oldValue = this._options[name];\n        if (oldValue === undefined) {\n            throw new Error(`Attempt to set unknown option ${name}`);\n        }\n\n        // Ignore no-op changes for types that can be checked quickly\n        if (valueType !== 'object' && oldValue === value) {\n            unchanged[name] = true;\n            return;\n        }\n\n        modified[name] = {\n            oldValue : oldValue,\n            newValue : value,\n        };\n        this._options[name] = value;\n    }\n\n    // The authorization and runtime information is initialized as soon\n    // as it is available.  This allows logs and spans to be buffered before\n    // the library is initialized, which can be helpul in a complex setup with\n    // many subsystems.\n    //\n    _initReportingDataIfNeeded(modified) {\n        // Ignore redundant initialization; complaint on inconsistencies\n        if (this._auth !== null) {\n            if (!this._runtime) {\n                return this._error('Inconsistent state: auth initialized without runtime.');\n            }\n            if (modified.access_token) {\n                throw new Error('Cannot change access_token after it has been set.');\n            }\n            if (modified.component_name) {\n                throw new Error('Cannot change component_name after it has been set.');\n            }\n            if (modified.collector_host) {\n                throw new Error('Cannot change collector_host after the connection is established');\n            }\n            if (modified.collector_port) {\n                throw new Error('Cannot change collector_port after the connection is established');\n            }\n            if (modified.collector_path) {\n                throw new Error('Cannot change collector_path after the connection is established');\n            }\n            if (modified.collector_encryption) {\n                throw new Error('Cannot change collector_encryption after the connection is established');\n            }\n            return;\n        }\n\n        // See if the Thrift data can be initialized\n        if (this._options.access_token.length > 0 && this._options.component_name.length > 0) {\n            this._runtimeGUID = this._platform.runtimeGUID(this._options.component_name);\n\n            this._auth = new AuthImp(this._options.access_token);\n\n            //\n            // Assemble the tracer tags from the user-specified and automatic,\n            // internal tags.\n            //\n            let tags = {};\n            _each(this._options.tags, (value, key) => {\n                if (typeof value !== 'string') {\n                    this._error(`Tracer tag value is not a string: key=${key}`);\n                    return;\n                }\n                tags[key] = value;\n            });\n            tags['lightstep.tracer_version'] = packageObject.version;\n            let platformTags = this._platform.tracerTags();\n            _each(platformTags, (val, key) => {\n                tags[key] = val;\n            });\n\n            this._runtime = new RuntimeImp(this._runtimeGUID, this._startMicros, this._options.component_name, tags);\n\n            this._info('Initializing thrift reporting data', {\n                component_name : this._options.component_name,\n                access_token   : this._auth.getAccessToken(),\n            });\n            this.emit('reporting_initialized');\n        }\n    }\n\n    getLogFieldKeyHardLimit() {\n        return this._options.log_field_key_hard_limit;\n    }\n\n    getLogFieldValueHardLimit() {\n        return this._options.log_field_value_hard_limit;\n    }\n\n    //-----------------------------------------------------------------------//\n    // Plugins\n    //-----------------------------------------------------------------------//\n\n    addPlatformPlugins(opts) {\n        let pluginSet = this._platform.plugins(opts);\n        _each(pluginSet, (val) => {\n            this.addPlugin(val);\n        });\n    }\n\n    addPlugin(plugin) {\n        // Don't add plug-ins twice\n        let name = plugin.name();\n        if (this._plugins[name]) {\n            return;\n        }\n\n        this._plugins[name] = plugin;\n        plugin.addOptions(this);\n    }\n\n    startPlugins() {\n        _each(this._plugins, (val, key) => {\n            this._plugins[key].start(this);\n        });\n    }\n\n    //-----------------------------------------------------------------------//\n    // Spans\n    //-----------------------------------------------------------------------//\n\n    // This is a LightStep-specific feature that should be used sparingly. It\n    // sets a \"global\" root span such that spans that would *otherwise* be root\n    // span instead inherit the trace GUID of the active root span. This is\n    // best clarified by example:\n    //\n    // On document load in the browser, an \"active root span\" is created for\n    // the page load process. Any spans started without an explicit parent\n    // will the document load trace GUID instead of starting a trace GUID.\n    // This implicit root remains active only until the page is done loading.\n    //\n    // Any span adding itself as a root span *must* remove itself along with\n    // calling finish(). This will *not* be done automatically.\n    //\n    // NOTE: currently, only the trace GUID is transferred; it may or may not\n    // make sure to make this a proper parent.\n    //\n    // NOTE: the root span tracking is handled as a set rather than a single\n    // global to avoid conflicts between libraries.\n    addActiveRootSpan(span) {\n        this._activeRootSpanSet[span._guid] = span;\n        this._setActiveRootSpanToYoungest();\n    }\n\n    removeActiveRootSpan(span) {\n        delete this._activeRootSpanSet[span._guid];\n        this._setActiveRootSpanToYoungest();\n    }\n\n    _setActiveRootSpanToYoungest() {\n        // Set the _activeRootSpan to the youngest of the roots in case of\n        // multiple.\n        this._activeRootSpan = null;\n        _each(this._activeRootSpanSet, (span) => {\n            if (!this._activeRootSpan ||\n                span._beginMicros > this._activeRootSpan._beginMicros) {\n                this._activeRootSpan = span;\n            }\n        });\n    }\n\n    //-----------------------------------------------------------------------//\n    // Encoding / decoding\n    //-----------------------------------------------------------------------//\n\n    _objectToUint8Array(obj) {\n        let jsonString;\n        try {\n            // encodeURIComponent() is a *very* inefficient, but simple and\n            // well-supported way to avoid having to think about Unicode in\n            // in the conversion to a UInt8Array.\n            //\n            // Writing multiple bytes for String.charCodeAt and\n            // String.codePointAt would be an alternate approach; again,\n            // simplicitly is being preferred over efficiency for the moment.\n            jsonString = encodeURIComponent(JSON.stringify(obj));\n        } catch (e) {\n            this._error('Could not binary encode carrier data.');\n            return null;\n        }\n\n        let buffer = new ArrayBuffer(jsonString.length);\n        let view = new Uint8Array(buffer);\n        for (let i = 0; i < jsonString.length; i++) {\n            let code = jsonString.charCodeAt(i);\n            if (!(code >= 0 && code <= 255)) {\n                this._error('Unexpected character code');\n                return null;\n            }\n            view[i] = code;\n        }\n        return view;\n    }\n\n    _uint8ArrayToObject(arr) {\n        if (!arr) {\n            this._error('Array is null');\n            return null;\n        }\n\n        let jsonString = '';\n        for (let i = 0; i < arr.length; i++) {\n            jsonString += String.fromCharCode(arr[i]);\n        }\n        try {\n            return JSON.parse(decodeURIComponent(jsonString));\n        } catch (e) {\n            this._error('Could not decode binary data.');\n            return null;\n        }\n    }\n\n    //-----------------------------------------------------------------------//\n    // Logging\n    //-----------------------------------------------------------------------//\n\n    log() {\n        let b = new LogBuilder(this);\n        return b;\n    }\n\n    //-----------------------------------------------------------------------//\n    // Buffers\n    //-----------------------------------------------------------------------//\n\n    _clearBuffers() {\n        this._spanRecords = [];\n        this._internalLogs = [];\n\n        // Create a new object to avoid overwriting the values in any references\n        // to the old object\n        let counters = {};\n        _each(this._counters, (unused, key) => {\n            counters[key] = 0;\n        });\n        this._counters = counters;\n    }\n\n    _buffersAreEmpty() {\n        if (this._spanRecords.length > 0) {\n            return false;\n        }\n        if (this._internalLogs.length > 0) {\n            return false;\n        }\n\n        let countersAllZero = true;\n        _each(this._counters, (val) => {\n            if (val > 0) {\n                countersAllZero = false;\n            }\n        });\n        return countersAllZero;\n    }\n\n    _addSpanRecord(record) {\n        this._internalAddSpanRecord(record);\n        this.emit('span_added', record);\n    }\n\n    _internalAddSpanRecord(record) {\n        if (!record) {\n            this._error('Attempt to add null record to buffer');\n            return;\n        }\n\n        if (this._spanRecords.length >= this._options.max_span_records) {\n            let index = Math.floor(this._spanRecords.length * Math.random());\n            this._spanRecords[index] = record;\n            this._counters['spans.dropped']++;\n        } else {\n            this._spanRecords.push(record);\n        }\n    }\n\n    _restoreRecords(spans, internalLogs, counters) {\n        _each(spans, (span) => {\n            this._internalAddSpanRecord(span);\n        });\n\n        let currentInternalLogs = this._internalLogs;\n        this._internalLogs = [];\n        let toAdd = internalLogs.concat(currentInternalLogs);\n        _each(toAdd, (log) => {\n            this._pushInternalLog(log);\n        });\n\n        _each(counters, (value, key) => {\n            if (key in this._counters) {\n                this._counters[key] += value;\n            } else {\n                this._error(`Bad counter name: ${key}`);\n            }\n        });\n    }\n\n    //-----------------------------------------------------------------------//\n    // Reporting loop\n    //-----------------------------------------------------------------------//\n\n    _setupReportOnExit() {\n        if (this._options.disable_report_on_exit) {\n            this._debug('report-on-exit is disabled.');\n            return;\n        }\n\n        // Do a final explicit flush. Note that the final flush may enqueue\n        // asynchronous callbacks that cause the 'beforeExit' event to be\n        // re-emitted when those callbacks finish.\n        let finalFlushOnce = 0;\n        let finalFlush = () => {\n            if (finalFlushOnce++ > 0) { return; }\n            this._info('Final flush before exit.');\n            this._flushReport(false, true, (err) => {\n                if (err) {\n                    this._warn('Final report before exit failed', {\n                        error                  : err,\n                        unflushed_spans        : this._spanRecords.length,\n                        buffer_youngest_micros : this._reportYoungestMicros,\n                    });\n                }\n            });\n        };\n        this._platform.onBeforeExit(finalFlush);\n    }\n\n    _startReportingLoop() {\n        if (this._options.disabled) {\n            this._info('Not starting reporting loop: instrumentation is disabled.');\n            return;\n        }\n        if (this._options.disable_reporting_loop) {\n            this._info('Not starting reporting loop: reporting loop is disabled.');\n            return;\n        }\n        if (this._auth === null) {\n            // Don't start the loop until the thrift data necessary to do the\n            // report is set up.\n            return;\n        }\n        if (this._reportingLoopActive) {\n            this._info('Reporting loop already started!');\n            return;\n        }\n\n        this._info('Starting reporting loop:', this._runtime);\n        this._reportingLoopActive = true;\n\n        // Stop the reporting loop so the Node.js process does not become a\n        // zombie waiting for the timers.\n        let stopReportingOnce = 0;\n        let stopReporting = () => {\n            if (stopReportingOnce++ > 0) { return; }\n            this._stopReportingLoop();\n        };\n        this._platform.onBeforeExit(stopReporting);\n\n        // Begin the asynchronous reporting loop\n        let loop = () => {\n            this._enqueueNextReport((err) => {\n                if (this._reportingLoopActive) {\n                    loop();\n                }\n            });\n        };\n\n        const delay = Math.floor(Math.random() * this._options.delay_initial_report_millis);\n        util.detachedTimeout(() => {\n            loop();\n        }, delay);\n    }\n\n    _stopReportingLoop() {\n        this._debug('Stopping reporting loop');\n\n        this._reportingLoopActive = false;\n        clearTimeout(this._reportTimer);\n        this._reportTimer = null;\n    }\n\n    _enqueueNextReport(done) {\n        // If there's already a report request enqueued, ignore this new\n        // request.\n        if (this._reportTimer) {\n            return;\n        }\n\n        // If the clock state is still being primed, potentially use the\n        // shorted report interval.\n        //\n        // However, do not use the shorter interval in the case of an error.\n        // That does not provide sufficient backoff.\n        let reportInterval = this._options.max_reporting_interval_millis;\n        if (this._reportErrorStreak === 0 &&\n            this._useClockState &&\n            !this._clockState.isReady()) {\n            reportInterval = Math.min(constants.CLOCK_STATE_REFRESH_INTERVAL_MS, reportInterval);\n        }\n\n        // After 3 consecutive errors, expand the retry delay up to 8x the\n        // normal interval, jitter the delay by +/- 25%, and be sure to back off\n        // *at least* the standard reporting interval in the case of an error.\n        let backOff = 1 + Math.min(7, Math.max(0, this._reportErrorStreak));\n        let basis = backOff * reportInterval;\n        let jitter = 1.0 + (Math.random() * 0.5 - 0.25);\n        let delay = Math.floor(Math.max(0, jitter * basis));\n\n        this._debug(`Delaying next flush for ${delay}ms`);\n        this._reportTimer = util.detachedTimeout(() => {\n            this._reportTimer = null;\n            this._flushReport(false, false, done);\n        }, delay);\n    }\n\n    /**\n     * Internal worker for a flush of buffered data into a report.\n     *\n     * @param  {bool} manual - this is a manually invoked flush request. Don't\n     *         override this call with a clock state syncing flush, for example.\n     * @param  {bool} detached - this is an \"at exit\" flush that should not block\n     *         the calling process in any manner. This is specifically called\n     *         \"detached\" due to the browser use case where the report is done,\n     *         not just asynchronously, but as a script request that continues\n     *         to run even if the page is navigated away from mid-request.\n     * @param  {function} done - standard callback function called on success\n     *         or error.\n     */\n    _flushReport(manual, detached, done) {\n        done = done || function (err) {};\n\n        let clockReady = this._clockState.isReady();\n        let clockOffsetMicros = this._clockState.offsetMicros();\n\n        // Diagnostic information on the clock correction\n        this._debug('time correction state', {\n            offset_micros  : clockOffsetMicros,\n            active_samples : this._clockState.activeSampleCount(),\n            ready          : clockReady,\n        });\n\n        let spanRecords = this._spanRecords;\n        let counters = this._counters;\n        let internalLogs = this._internalLogs;\n\n        // If the clock is not ready, do an \"empty\" flush to build more clock\n        // samples before the real data is reported.\n        // A detached flush (i.e. one intended to fire at exit or other \"last\n        // ditch effort\" event) should always use the real data.\n        if (this._useClockState && !manual && !clockReady && !detached) {\n            this._debug('Flushing empty report to prime clock state');\n            spanRecords = [];\n            counters    = {};\n            internalLogs = [];\n        } else {\n            // Early out if we can.\n            if (this._buffersAreEmpty()) {\n                this._debug('Skipping empty report');\n                return done(null);\n            }\n\n            // Clear the object buffers as the data is now in the local\n            // variables\n            this._clearBuffers();\n            this._debug(`Flushing report (${spanRecords.length} spans)`);\n        }\n\n        this._transport.ensureConnection(this._options);\n\n        // Ensure the runtime GUID is set as it is possible buffer logs and\n        // spans before the GUID is necessarily set.\n        console.assert(this._runtimeGUID !== null, 'No runtime GUID for Tracer'); // eslint-disable-line no-console\n\n        let timestampOffset = this._useClockState ? clockOffsetMicros : 0;\n        let now = this._platform.nowMicros();\n        let report = new ReportImp(this._runtime, this._reportYoungestMicros, now,\n            spanRecords, internalLogs, counters, timestampOffset);\n\n        this.emit('prereport', report);\n        let originMicros = this._platform.nowMicros();\n\n        this._transport.report(detached, this._auth, report, (err, res) => {\n            let destinationMicros = this._platform.nowMicros();\n            let reportWindowSeconds = (now - report.oldest_micros) / 1e6;\n\n            if (err) {\n                // How many errors in a row? Influences the report backoff.\n                this._reportErrorStreak++;\n\n                // On a failed report, re-enqueue the data that was going to be\n                // sent.\n                let errString;\n                if (err.message) {\n                    errString = `${err.message}`;\n                } else {\n                    errString = `${err}`;\n                }\n                this._warn(`Error in report: ${errString}`, {\n                    last_report_seconds_ago : reportWindowSeconds,\n                });\n\n                this._restoreRecords(\n                    report.getSpanRecords(),\n                    report.getInternalLogs(),\n                    report.getCounters());\n\n                // Increment the counter *after* the counters are restored\n                this._counters['reports.errors.send']++;\n\n                this.emit('report_error', err, {\n                    error    : err,\n                    streak   : this._reportErrorStreak,\n                    detached : detached,\n                });\n            } else {\n                if (this.verbosity() >= 4) {\n                    this._debug(`Report flushed for last ${reportWindowSeconds} seconds`, {\n                        spans_reported : report.span_records.length,\n                    });\n                }\n\n                // Update internal data after the successful report\n                this._reportErrorStreak = 0;\n                this._reportYoungestMicros = now;\n\n                // Update the clock state if there's info from the report\n                if (res) {\n                    if (res.timing && res.timing.receive_micros && res.timing.transmit_micros) {\n                        this._clockState.addSample(\n                            originMicros,\n                            res.timing.receive_micros,\n                            res.timing.transmit_micros,\n                            destinationMicros);\n                    } else {\n                        // The response does not have timing information. Disable\n                        // the clock state assuming there'll never be timing data\n                        // to use.\n                        this._useClockState = false;\n                    }\n\n                    if (res.errors && res.errors.length > 0) {\n                        this._warn('Errors in report', res.errors);\n                    }\n                } else {\n                    this._useClockState = false;\n                }\n\n                this.emit('report', report, res);\n            }\n            return done(err);\n        });\n    }\n\n    //-----------------------------------------------------------------------//\n    // Stats and metrics\n    //-----------------------------------------------------------------------//\n\n    /**\n     * Internal API that returns some internal metrics.\n     */\n    stats() {\n        return {\n            counters : this._counters,\n        };\n    }\n\n    //-----------------------------------------------------------------------//\n    // Internal logging & errors\n    //-----------------------------------------------------------------------//\n    // The rules for how internal logs are processed:\n    //\n    // * Internal logs that are included in the Collector report:\n    //      - Always send errors logs along with the reports\n    //      - Never include any other logs\n    // * Internal logs that are echoed to the host application:\n    //      - See the README.md :)\n    //\n    _debug(msg, payload) {\n        if (this.verbosity() < 4) {\n            return;\n        }\n        this._printToConsole('log', `[LightStep:DEBUG] ${msg}`, payload);\n    }\n\n    _info(msg, payload) {\n        if (this.verbosity() < 3) {\n            return;\n        }\n        this._printToConsole('log', `[LightStep:INFO] ${msg}`, payload);\n    }\n\n    _warn(msg, payload) {\n        this._counters['internal.warnings']++;\n\n        if (this.verbosity() < 3) {\n            return;\n        }\n        this._printToConsole('warn', `[LightStep:WARN] ${msg}`, payload);\n    }\n\n    _error(msg, payload) {\n        this._counters['internal.errors']++;\n\n        // Internal errors are always reported to the collector\n        let record = this.log()\n            .level(constants.LOG_ERROR)\n            .message(msg)\n            .payload(payload)\n            .record();\n        this._pushInternalLog(record);\n\n        // Internal errors are reported to the host console conditionally based\n        // on the verbosity level.\n        let verbosity = this.verbosity();\n        if (verbosity === 0) {\n            return;\n        }\n\n        // Error messages are throttled in verbosity === 1 mode\n        const now = Date.now();\n        if (verbosity === 1) {\n            const nextVisible = this._lastVisibleErrorMillis + this._options.error_throttle_millis;\n            if (now < nextVisible) {\n                this._skippedVisibleErrors++;\n                return;\n            }\n            if (this._skippedVisibleErrors > 0) {\n                /* eslint-disable max-len */\n                const s = `${this._skippedVisibleErrors} errors masked since last logged error. Increase 'verbosity' option to see all errors.`;\n                /* eslint-enable max-len */\n                this._printToConsole('error', `[LightStep:ERROR] ${s}`, payload);\n            }\n        }\n\n        this._printToConsole('error', `[LightStep:ERROR] ${msg}`, payload);\n        this._lastVisibleErrorMillis = now;\n        this._skippedVisibleErrors = 0;\n    }\n\n    _printToConsole(type, msg, payload) {\n        // Internal option to silence intentional errors generated by the unit\n        // tests.\n        if (this._options.silent) {\n            return;\n        }\n\n        if (payload !== undefined) {\n            console[type](msg, payload); // eslint-disable-line no-console\n        }  else {\n            console[type](msg); // eslint-disable-line no-console\n        }\n    }\n\n    _pushInternalLog(record) {\n        if (!record) {\n            return;\n        }\n        if (this._internalLogs.length >= MAX_INTERNAL_LOGS) {\n            record.message = `MAX_INTERNAL_LOGS limit hit. Last error: ${record.message}`;\n            this._internalLogs[this._internalLogs.length - 1] = record;\n        } else {\n            this._internalLogs.push(record);\n        }\n    }\n}\n"]}
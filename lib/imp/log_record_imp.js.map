{"version":3,"sources":["../../src/imp/log_record_imp.js"],"names":[],"mappings":"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","file":"log_record_imp.js","sourcesContent":["import { crouton_thrift } from '../platform_abstraction_layer'; // eslint-disable-line camelcase\nimport _each from '../_each';\nimport * as coerce from './coerce'; // eslint-disable-line camelcase\nlet proto = require('./generated_proto/collector_pb.js');\nlet googleProtobufTimestampPB = require('google-protobuf/google/protobuf/timestamp_pb.js');\n\nexport default class LogRecordImp {\n    constructor(logFieldKeyHardLimit, logFieldValueHardLimit, timestampMicros, fields) {\n        this._logFieldKeyHardLimit = logFieldKeyHardLimit;\n        this._logFieldValueHardLimit = logFieldValueHardLimit;\n        this._timestampMicros = timestampMicros;\n        this._fields = fields;\n        this._keysOverLimit = 0;\n        this._valuesOverLimit = 0;\n    }\n\n    _clearOverLimits() {\n        this._keysOverLimit = 0;\n        this._valuesOverLimit = 0;\n    }\n\n    getNumKeysOverLimit() {\n        return this._keysOverLimit;\n    }\n\n    getNumValuesOverLimit() {\n        return this._valuesOverLimit;\n    }\n\n    toThrift() {\n        this._clearOverLimits();\n        let thriftFields = [];\n        _each(this._fields, (value, key) => {\n            if (!key || !value) {\n                return;\n            }\n            let keyStr = this.getFieldKey(key);\n            let valStr = this.getFieldValue(value);\n            thriftFields.push(new crouton_thrift.KeyValue({\n                Key   : keyStr,\n                Value : valStr,\n            }));\n        });\n\n        return new crouton_thrift.LogRecord({\n            timestamp_micros : this._timestampMicros,\n            fields           : thriftFields,\n        });\n    }\n\n    getFieldKey(key) {\n        let keyStr = coerce.toString(key);\n        if (keyStr.length > this._logFieldKeyHardLimit) {\n            this._keysOverLimit += 1;\n            keyStr = `${keyStr.substr(0, this._logFieldKeyHardLimit)}...`;\n        }\n        return keyStr;\n    }\n\n    getFieldValue(value) {\n        let valStr = null;\n        if (value instanceof Object) {\n            try {\n                valStr = JSON.stringify(value, null, '  ');\n            } catch (e) {\n                valStr = `Could not encode value. Exception: ${e}`;\n            }\n        } else {\n            valStr = coerce.toString(value);\n        }\n        if (valStr.length > this._logFieldValueHardLimit) {\n            this._valuesOverLimit += 1;\n            valStr = `${valStr.substr(0, this._logFieldValueHardLimit)}...`;\n        }\n        return valStr;\n    }\n\n    toProto() {\n        this._clearOverLimits();\n        let log = new proto.Log();\n        let ts = new googleProtobufTimestampPB.Timestamp();\n        let secs = Math.floor(this._timestampMicros / 1000000);\n        let nanos = this._timestampMicros % 1000000;\n        ts.setSeconds(secs);\n        ts.setNanos(nanos);\n        log.setTimestamp(ts);\n        let keyValues = [];\n        _each(this._fields, (value, key) => {\n            if (!key || !value) {\n                return;\n            }\n            let keyStr = this.getFieldKey(key);\n            let valStr = this.getFieldValue(value);\n\n            let keyValue = new proto.KeyValue();\n            keyValue.setKey(keyStr);\n            keyValue.setStringValue(valStr);\n            keyValues.push(keyValue);\n        });\n\n        log.setFieldsList(keyValues);\n\n        return log;\n    }\n}\n"]}